{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isComplexDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' );\nvar isBooleanDataType = require( '@stdlib/ndarray-base-assert-is-boolean-data-type' );\nvar isRealFloatingDataType = require( '@stdlib/ndarray-base-assert-is-real-floating-point-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isSafeCast = require( '@stdlib/ndarray-base-assert-is-safe-data-type-cast' );\nvar minDataType = require( '@stdlib/ndarray-min-dtype' );\nvar minSignedIntegerDataType = require( '@stdlib/ndarray-base-min-signed-integer-dtype' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Verifies whether a provided value can be safely cast to a \"generic\" or unknown data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - data type\n* @returns {boolean} boolean result\n*\n* @example\n* var out = validateGeneric( 3, 'generic' );\n* // returns true\n*/\nfunction validateGeneric() {\n\treturn true;\n}\n\n/**\n* Verifies whether a provided value can be safely cast to a boolean data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - data type\n* @returns {boolean} boolean result\n*\n* @example\n* var out = validateBoolean( true, 'bool' );\n* // returns true\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var out = validateBoolean( new Complex128( 5.0, 6.0 ), 'bool' );\n* // returns false\n*/\nfunction validateBoolean( value ) {\n\treturn isBoolean( value );\n}\n\n/**\n* Verifies whether a provided value can be safely cast to a real-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - data type\n* @returns {boolean} boolean result\n*\n* @example\n* var out = validateRealFloating( 3.14, 'float64' );\n* // returns true\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var out = validateRealFloating( new Complex128( 5.0, 6.0 ), 'float64' );\n* // returns false\n*/\nfunction validateRealFloating( value ) {\n\treturn isNumber( value );\n}\n\n/**\n* Verifies whether a provided value can be safely cast to a complex-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - data type\n* @returns {boolean} boolean result\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var out = validateComplexFloating( new Complex128( 5.0, 6.0 ), 'complex128' );\n* // returns true\n*\n* @example\n* var out = validateComplexFloating( {}, 'complex128' );\n* // returns false\n*/\nfunction validateComplexFloating( value ) {\n\treturn ( isNumber( value ) || isComplexLike( value ) );\n}\n\n/**\n* Verifies whether a provided value can be safely cast to a signed integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - data type\n* @returns {boolean} boolean result\n*\n* @example\n* var out = validateSignedInteger( 3, 'int32' );\n* // returns true\n*\n* @example\n* var out = validateSignedInteger( 3.14, 'int32' );\n* // returns false\n*/\nfunction validateSignedInteger( value, dtype ) {\n\treturn ( isInteger( value ) && isSafeCast( minSignedIntegerDataType( value ), dtype ) ); // eslint-disable-line max-len\n}\n\n/**\n* Verifies whether a provided value can be safely cast to an unsigned integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {boolean} boolean result\n*\n* @example\n* var out = validateUnsignedInteger( 3, 'uint32' );\n* // returns true\n*\n* @example\n* var out = validateUnsignedInteger( -3, 'uint32' );\n* // returns false\n*/\nfunction validateUnsignedInteger( value, dtype ) {\n\treturn ( isInteger( value ) && isSafeCast( minDataType( value ), dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely cast to a binary data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {boolean} boolean result\n*\n* @example\n* var out = validateBinary( 3, 'binary' );\n* // returns true\n*\n* @example\n* var out = validateBinary( -3, 'binary' );\n* // returns false\n*/\nfunction validateBinary( value ) {\n\treturn ( isInteger( value ) && minDataType( value ) === 'uint8' );\n}\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating whether a scalar value can be safely cast or, for floating-point data types, downcast to specified ndarray data type.\n*\n* @param {*} value - scalar value\n* @param {string} dtype - ndarray data type\n* @throws {TypeError} second argument must be a supported data type\n* @returns {boolean} boolean indicating whether a scalar value can be safely cast\n*\n* @example\n* var bool = isScalarMostlySafeCompatible( 3.0, 'float64' );\n* // returns true\n*\n* @example\n* var bool = isScalarMostlySafeCompatible( 3.14, 'int32' );\n* // returns false\n*\n* @example\n* var bool = isScalarMostlySafeCompatible( -1, 'uint32' );\n* // returns false\n*/\nfunction isScalarMostlySafeCompatible( value, dtype ) { // eslint-disable-line id-length\n\tif ( dtype === 'generic' ) {\n\t\treturn validateGeneric( value, dtype );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn validateBinary( value, dtype );\n\t}\n\tif ( isRealFloatingDataType( dtype ) ) {\n\t\treturn validateRealFloating( value, dtype );\n\t}\n\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\treturn validateUnsignedInteger( value, dtype );\n\t}\n\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\treturn validateSignedInteger( value, dtype );\n\t}\n\tif ( isBooleanDataType( dtype ) ) {\n\t\treturn validateBoolean( value, dtype );\n\t}\n\tif ( isComplexDataType( dtype ) ) {\n\t\treturn validateComplexFloating( value, dtype );\n\t}\n\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type. Value: `%s`.', dtype ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isScalarMostlySafeCompatible;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine whether a scalar value can be safely cast or, for floating-point data types, downcast to specified ndarray data type.\n*\n* @module @stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible\n*\n* @example\n* var isScalarMostlySafeCompatible = require( '@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible' );\n*\n* var bool = isScalarMostlySafeCompatible( 3.0, 'float64' );\n* // returns true\n*\n* bool = isScalarMostlySafeCompatible( 3.14, 'int32' );\n* // returns false\n*\n* bool = isScalarMostlySafeCompatible( -1, 'uint32' );\n* // returns false\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAoB,QAAS,iEAAkE,EAC/FC,EAAoB,QAAS,kDAAmD,EAChFC,EAAyB,QAAS,8DAA+D,EACjGC,EAA4B,QAAS,2DAA4D,EACjGC,EAA0B,QAAS,yDAA0D,EAC7FC,EAAa,QAAS,oDAAqD,EAC3EC,EAAc,QAAS,2BAA4B,EACnDC,EAA2B,QAAS,+CAAgD,EACpFC,EAAS,QAAS,uBAAwB,EAiB9C,SAASC,GAAkB,CAC1B,MAAO,EACR,CAoBA,SAASC,EAAiBC,EAAQ,CACjC,OAAOb,EAAWa,CAAM,CACzB,CAoBA,SAASC,EAAsBD,EAAQ,CACtC,OAAOf,EAAUe,CAAM,CACxB,CAoBA,SAASE,EAAyBF,EAAQ,CACzC,OAASf,EAAUe,CAAM,GAAKZ,EAAeY,CAAM,CACpD,CAkBA,SAASG,EAAuBH,EAAOI,EAAQ,CAC9C,OAASlB,EAAWc,CAAM,GAAKN,EAAYE,EAA0BI,CAAM,EAAGI,CAAM,CACrF,CAkBA,SAASC,EAAyBL,EAAOI,EAAQ,CAChD,OAASlB,EAAWc,CAAM,GAAKN,EAAYC,EAAaK,CAAM,EAAGI,CAAM,CACxE,CAkBA,SAASE,EAAgBN,EAAQ,CAChC,OAASd,EAAWc,CAAM,GAAKL,EAAaK,CAAM,IAAM,OACzD,CAyBA,SAASO,EAA8BP,EAAOI,EAAQ,CACrD,GAAKA,IAAU,UACd,OAAON,EAAiBE,EAAOI,CAAM,EAEtC,GAAKA,IAAU,SACd,OAAOE,EAAgBN,EAAOI,CAAM,EAErC,GAAKb,EAAwBa,CAAM,EAClC,OAAOH,EAAsBD,EAAOI,CAAM,EAE3C,GAAKZ,EAA2BY,CAAM,EACrC,OAAOC,EAAyBL,EAAOI,CAAM,EAE9C,GAAKX,EAAyBW,CAAM,EACnC,OAAOD,EAAuBH,EAAOI,CAAM,EAE5C,GAAKd,EAAmBc,CAAM,EAC7B,OAAOL,EAAiBC,EAAOI,CAAM,EAEtC,GAAKf,EAAmBe,CAAM,EAC7B,OAAOF,EAAyBF,EAAOI,CAAM,EAE9C,MAAM,IAAI,UAAWP,EAAQ,gFAAiFO,CAAM,CAAE,CACvH,CAKApB,EAAO,QAAUuB,IChMjB,IAAIC,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNumber", "isInteger", "isBoolean", "isComplexLike", "isComplexDataType", "isBooleanDataType", "isRealFloatingDataType", "isUnsignedIntegerDataType", "isSignedIntegerDataType", "isSafeCast", "minDataType", "minSignedIntegerDataType", "format", "validateGeneric", "validateBoolean", "value", "validateRealFloating", "validateComplexFloating", "validateSignedInteger", "dtype", "validateUnsignedInteger", "validateBinary", "isScalarMostlySafeCompatible", "main"]
}
